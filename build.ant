<!-- 

 Rhizi build targets

-->
<project name="rhizi-server" default="pkg-deb"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless"
         >

   <macrodef name="rsync">
      <attribute name="src" />
      <attribute name="dst" />
      <attribute name="extraOpts" default="" />
      <sequential>
         <exec dir="${basedir}" executable="/usr/bin/rsync" failonerror="true">
            <arg line="-avz @{extraOpts}" />
            <arg value="@{src}" />
            <arg value="@{dst}" />

            <!-- note: RSYNC_CONNECT_PROG has not effect when dst is local dir path -->
            <env key="RSYNC_CONNECT_PROG"
                 value="ssh root@%H nc 127.0.0.1 873" />
         </exec>
      </sequential>
   </macrodef>

   <macrodef name="scp_macro"
             description="a .ssh/config aware scp invocation macro">
      <!-- user arg intentionally unsupported, rely on .ssh/config -->
      <attribute name="src" />
      <attribute name="todir" />
      <attribute name="remotehost" />
      <attribute name="extraOpts" default="" />

      <sequential>
         <exec dir="${basedir}" executable="/usr/bin/scp" failonerror="true">
            <arg line="@{extraOpts}" />
            <arg line="@{src}" />
            <arg value="@{remotehost}:@{todir}" />
         </exec>
      </sequential>
   </macrodef>

   <macrodef name="client-optimize">
      <attribute name="root" />
      <attribute name="build" />
      <sequential>
         <exec dir="@{root}" executable="/usr/bin/r.js" failonerror="true">
            <arg line="-o @{build}" />
         </exec>
      </sequential>
   </macrodef>

   <macrodef name="generate_version_tag">
      <attribute name="outputDir" />
      <sequential>
         <exec dir="${basedir}"
               executable="/usr/bin/git"
               output="@{outputDir}/version.txt">
            <arg line="describe" />
         </exec>
      </sequential>
   </macrodef>

   <property name="buildDir" value="build" />
   <property name="targetDeploymentDir" value="deploy-local" />
   <property name="remoteDeployServer" value="rz-0.unige.ch" />
   <property name="targetDomain" value="default.rhizi.net" />
   <property name="doClientOptimize" value="false" />
   <property name="localServerUseSymlink" value="true" />
   <property name="defaultDomain" value="default.rhizi.net" />

   <tstamp>
      <format property="versionQualifier" pattern="yyyyMMddHHmm" />
   </tstamp>

   <target name="clean" description="remove all work folders">
      <delete dir="dist" />
      <delete dir="${buildDir}" />
   </target>

   <target name="deploy-local.clean">

      <mkdir dir="${targetDeploymentDir}" description="bootstrap if missing" />

      <!-- bin/ -> link: avoid specifying followsymlinks on the following delete task -->
      <symlink action="delete" link="deploy-local/bin" />
      <delete verbose="true" includeemptydirs="true">
         <fileset dir="${targetDeploymentDir}"
                  includes="**/*"
                  defaultexcludes="false" />
      </delete>
   </target>

   <target name="deploy-local"
           depends="deploy-local.clean"
           description="locally deploy webapp">

      <!-- [!] trailing '/' on rsync src targets critical -->

      <local name="src_client" />
      <local name="src_server" />
      <property name="src_client" value="src/client" />
      <property name="src_server" value="src/server" />

      <mkdir dir="${targetDeploymentDir}/etc" />
      <mkdir dir="${targetDeploymentDir}/fragment.d/template.d" />
      <mkdir dir="${targetDeploymentDir}/static" />

      <generate_version_tag output="res/template.d" />
      <generate_version_tag outputDir="${targetDeploymentDir}/fragment.d/template.d" />

      <!-- note: defaults to not overwriting, so rhizi-server.conf is safe  -->

      <parallel>
         <!-- code -->
         <rsync src="${src_client}/" dst="${targetDeploymentDir}/static/js" />

         <symlink if:true="${localServerUseSymlink}"
                  action="single"
                  overwrite="true"
                  link="${targetDeploymentDir}/bin"
                  resource="${basedir}/${src_server}" />
         <rsync unless:true="${localServerUseSymlink}"
                src="${basedir}/${src_server}/"
                dst="${targetDeploymentDir}/bin" />

         <!-- conf-->
         <copy file="res/etc/rhizi-server.conf"
               tofile="${targetDeploymentDir}/etc/rhizi-server.conf" />

         <!-- res -->
         <rsync src="res/client/" dst="${targetDeploymentDir}/static" />
         <rsync src="${fragmentd_default_path}/"
                dst="${targetDeploymentDir}/fragment.d" />

         <!-- auth -->
         <copy file="res/etc/user_db.db"
               tofile="${targetDeploymentDir}/user_db.db"
               failonerror="false" />

         <!-- default fragments: templates -->
         <generate_version_tag outputdir="${deploy_target_dir}/fragment.d/template.d" />
         <rsync src="${default_fragmentd_src_path}/template.d"
                dst="${deploy_target_dir}/fragment.d" />

         <!-- default fragments: other - [!] must reside under static/ -->
         <copy file="res/etc/rhizi-server.conf.example"
               tofile="res/etc/rhizi-server.conf" />
         <copy todir="${targetDeploymentDir}/fragment.d/template.d"
               failonerror="false">
            <fileset dir="res/local/template/fragment/by-domain/${defaultDomain}"
                     includes="*" />
         </copy>
      </parallel>

      <client-optimize if:true="${doClientOptimize}"
                       root="src/client/"
                       build="build.js" />

      <parallel>
         <!-- domain specific overrides -->
         <copy file="src/local/domain/${targetDomain}/domain_types.js"
               tofile="${targetDeploymentDir}/static/js/model/domain_types.js" />
         <copy todir="${targetDeploymentDir}/fragment.d/template.d"
               overwrite="true"
               failonerror="false">
            <fileset dir="res/local/template/fragment/by-domain/${targetDomain}" />
         </copy>

      </parallel>

   </target>

   <target name="deploy-remote" depends="deploy-local">
      <!-- [!] trailing '/' on rsync src targets critical -->

      <local name="rsync_module" />
      <property name="rsync_module" value="rhizi.net" />
      <property name="filter_list_str"
                value="-f '- __pycache__/' -f '- *.pyc'" />

      <client-optimize if:true="${doClientOptimize}"
                       root="src/client/"
                       build="build.js" />

      <!-- -l: traverse bin/ -> ../src-py link -->
      <rsync src="${targetDeploymentDir}/"
             extraopts="--delete -lL ${filter_list_str}"
             dst="rsync://${remoteDeployServer}/${rsync_module}/rhizi.net/" />

      <parallel>
         <!-- apply production patches -->
         <rsync extraopts="--delete"
                src="res/production-patch-set/${targetDomain}/rhizi-server.production.conf"
                dst="rsync://${remoteDeployServer}/${rsync_module}/rhizi.net/etc/rhizi-server.conf" />

         <rsync src="src/local/server-tools"
                dst="rsync://${remoteDeployServer}/${rsync_module}/" />

      </parallel>
   </target>

   <target name="pkg-deb__mux" description="package as .deb">
      <antcall target="pkg-deb__common">
         <!-- FIXME: use rhizi-mux -->
         <param name="package_name" value="rhizi-mux" />
         <param name="pkg_variant" value="rhizi-mux" />
      </antcall>
   </target>

   <target name="pkg-deb__single" description="package as .deb">
      <antcall target="pkg-deb__common">
         <param name="package_name" value="rhizi" />
         <param name="pkg_variant" value="rhizi-single" />
      </antcall>
   </target>

   <target name="pkg-deb__common" depends="clean" description="package as .deb">

      <fail unless="pkg_variant" />
      <fail unless="package_name" />

      <property name="pkg_version" value="0.1.0" />
      <property name="pkg_debname" value="${package_name}_${pkg_version}" />
      <property name="pkg_fullname" value="${package_name}-${pkg_version}" />
      <property name="build_dir__deb_pkg"
                value="${buildDir}/deb-pkg__${pkg_variant}/${pkg_fullname}" />

      <mkdir dir="dist" />
      <mkdir dir="${build_dir__deb_pkg}" />

      <exec dir="${basedir}" executable="/usr/bin/git">
         <arg value="clone" />
         <arg line="--depth 1" />
         <arg value="file://${basedir}" />
         <arg value="${build_dir__deb_pkg}" />
      </exec>

      <copy todir="${build_dir__deb_pkg}/debian">
         <fileset dir="res/debian/pkg__rhizi-common" />
         <fileset dir="res/debian/pkg__${pkg_variant}" />
      </copy>

      <!-- set debian/control package name -->
      <replaceregexp file="${build_dir__deb_pkg}/debian/control">
         <regexp pattern="\$\{package-name\}" />
         <substitution expression="${package_name}" />
      </replaceregexp>

      <!-- generate version fragment -->
      <generate_version_tag outputdir="${build_dir__deb_pkg}/${default_fragmentd_src_path}/template.d" />

      <delete verbose="true" includeemptydirs="true">
         <fileset dir="${build_dir__deb_pkg}" includes="Makefile" />
         <fileset dir="${build_dir__deb_pkg}" includes="**/*.scss" />
         <!-- TODO: use when depending on libjs-jquery, libjs-underscore
         <fileset file="${build_dir__deb_pkg}/res/client/lib/jquery.js" />
         <fileset file="${build_dir__deb_pkg}/res/client/lib/underscore.js" />
      -->
      </delete>

      <!-- debuild flags:
           -b: binary-only build
           -us: do not sign the source package
           -uc: do not sign .changes
       -->
      <exec dir="${build_dir__deb_pkg}" executable="/usr/bin/debuild">
         <arg value="-b" />
         <arg value="-us" />
         <arg value="-uc" />
      </exec>

   </target>

   <target name="pkg-deb.list">
      <exec executable="/usr/bin/dpkg">
         <arg line="-c ${buildDir}/${pkg_debname}_amd64.deb" />
      </exec>
   </target>

</project>
