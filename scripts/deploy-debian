#!/usr/bin/env python

"""
upgrade debian package, run from a Fedora machine with working systemd-nspawn
with a machine called rzdeb.
"""

import argparse
import os
import subprocess
import re
import json
import sys
from functools import wraps

from util import versions


NSPAWN_MACHINE = 'rzdeb'
CHROOT = '{}/rhizi/rhizi-machines/debian7-chroot/'.format(os.environ['HOME'])
REMOTE_USER = 'root'
RHIZI_SOURCE_REPO = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
SSH_KEY_DIR = os.path.realpath(os.path.join(RHIZI_SOURCE_REPO, '..', 'ssh-keys'))
# Assume identity of user running this script and in nspawn user
USER = os.getuid()


# set via command line arguments
remote_host = None
dryrun = False
dryrun_install = True

# use systemd nspawn if not running under debian, otherwise just natively
# build the debian package
running_under_debian = os.path.exists('/etc/debian_version')


def check_call(oneliner):
    if not isinstance(oneliner, list):
        args = oneliner.split()
    else:
        args = oneliner
    print('calling {}'.format(repr(args)))
    print('oneliner {}'.format(' '.join(args)))
    if not dryrun:
        subprocess.check_call(args)


def clone(source_repo, target_path):
    check_call('git clone {} {}'.format(source_repo, target_path))


def chroot(path, oneliner, user=USER):
    check_call(['sudo', 'systemd-nspawn', '-u', str(user),
                '-M', NSPAWN_MACHINE, '-D', CHROOT, "bash", "-c",
                'cd {}; {}'.format(path, oneliner)])


def rm(filename):
    if os.path.exists(filename):
        os.unlink(filename)


def rmdir(path):
    check_call(['rm', '-Rf', path])


def keyfile(host):
    return os.path.join(SSH_KEY_DIR, '{}.rsa'.format(host))


def require_host(f):
    @wraps(f)
    def inner(*args, **kw):
        if remote_host is None:
            return
        return f(*args, **kw)
    return inner


@require_host
def scp(source, target):
    check_call(['scp', '-i', keyfile(remote_host), source, '{}@{}:{}'.format(REMOTE_USER, remote_host, target)])


@require_host
def ssh(*args):
    check_call(['ssh', '-i', keyfile(remote_host), '{}@{}'.format(REMOTE_USER, remote_host)] + list(args))


def install_deb(filename):
    if dryrun_install:
        ssh('ls', '-l', filename)
        ssh('dpkg', '-l', '|', 'grep', 'mux')
    else:
        ssh('dpkg','-i', filename)


def build_deb():
    cmd = 'ant -f build.ant pkg-deb__mux'
    if running_under_debian:
        check_call(cmd)
    else:
        chroot('/home/rhizi', cmd)


def install_locally(filename):
    cmd = 'dpkg -i {}'.format(filename)
    if running_under_debian:
        check_call('sudo {}'.format(cmd))
    else:
        chroot('/home/rhizi', cmd, user='root')


def main():
    versions.ensure_synced()
    print("running under debian" if running_under_debian else "running with nspawn")

    chroot_rhizi = os.path.join(CHROOT, 'home', 'rhizi')
    chroot_rhizi_internal = '/home/rhizi'
    deb_filename = 'rhizi-mux_{}_amd64.deb'.format(versions.debian)
    deb_repo_path = os.path.join('build', 'deb-pkg__rhizi-mux', deb_filename)
    deb_relative_path = os.path.join('home', 'rhizi', deb_repo_path)
    if running_under_debian:
        deb_local_fullpath = deb_chroot_fullpath = os.path.join(RHIZI_SOURCE_REPO, deb_repo_path)
    else:
        deb_chroot_fullpath = '/' + deb_relative_path
        deb_local_fullpath = os.path.join(CHROOT, deb_relative_path)

    # clean chroot/old package
    print("removing old package/chroot checkout")
    if running_under_debian:
        rm(deb_local_fullpath)
    else:
        rmdir(chroot_rhizi)

    assert not os.path.exists(deb_local_fullpath)

    # clone into chroot
    if not running_under_debian:
        clone(RHIZI_SOURCE_REPO, chroot_rhizi)
        chroot(chroot_rhizi_internal, 'npm install')

    # create deb package
    build_deb()
    if not dryrun:
        assert os.path.exists(deb_local_fullpath), "missing {}".format(deb_local_fullpath)

    # install locally
    if not running_under_debian:
        install_locally(deb_chroot_fullpath)

    # copy to target server
    scp(source=deb_local_fullpath, target=deb_filename)
    install_deb(deb_filename)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--real', action='store_true', default=False)
    parser.add_argument('--dryrun', action='store_true', default=False)
    parser.add_argument('--host', default=None)
    args = parser.parse_args(sys.argv[1:])
    dryrun = args.dryrun
    dryrun_install = not args.real
    remote_host = args.host
    main()
